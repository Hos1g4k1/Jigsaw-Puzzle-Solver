#!/usr/bin/env python

import argparse
import matplotlib.pyplot as plt
import cv2
from time import time
from jigsaw.genetic_algorithm import GeneticAlgorithm
from jigsaw.utils import Plot

GENERATIONS = 20
POPULATION = 200


def show_image(img, title):
    Plot(img, title)
    plt.show()


def parse_arguments():

    parser = argparse.ArgumentParser(description="A Genetic based solver for jigsaw puzzles")
    parser.add_argument("--image", type=str, default="out.jpg", help="Input image.")
    parser.add_argument("--generations", type=int, default=GENERATIONS, help="Num of generations.")
    parser.add_argument("--population", type=int, default=POPULATION, help="Size of population.")
    parser.add_argument("--size", type=int, help="Single piece size in pixels.")
    parser.add_argument("--save", action="store_true", help="Save puzzle result as image.")
    return parser.parse_args()

if __name__ == "__main__":
    args = parse_arguments()

    image = cv2.imread(args.image)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

    piece_size = args.size

    print("\n=== Population:  {}".format(args.population))
    print("=== Generations: {}".format(args.generations))
    print("=== Piece size:  {} px".format(piece_size))

    start = time()
    algorithm = GeneticAlgorithm(image, piece_size, args.population, args.generations)
    solution = algorithm.start_evolution()
    end = time()

    print("\n=== Done in {0:.3f} s".format(end - start))

    solution_image = solution.to_image()
    solution_image_name = args.image.split(".")[0] + "_solution.jpg"

    if args.save:
        cv2.imwrite(solution_image_name, solution_image)
        print("=== Result saved as '{}'".format(solution_image_name))

    print("=== Close figure to exit")
    show_image(solution_image, "Solution")
